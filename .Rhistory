add2 <- function (x,y){
x + y
}
add2(3,5)
add <- function (x,n){
use <-x > n
x[use]
}
x < 1:20
x <- 1:20
add (x)
add (x,15)
add (x,12)
above <- function (x,n = 10){
use <-x > n
x[use]
}
above (x)
colmean <- function (y){
nc <- ncol(y)
means <- numeric  (nc)
for (i in 1:nc){
means[i] <- means([,y])
}
means
}
colmean <- function (y){
nc <- ncol(y)
means <- numeric  (nc)
for (i in 1:nc){
means[i] <- mean([,y])
}
means
}
colmean <- function (y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean([,y])
}
means
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean([,y])
}
means
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[,y])
}
means
}
columnmean(airquality)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
colmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA )
}
means
}
colmean (airquality)
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {}
y <- if(x < 3) {
NA
} else ()
y <- if(x < 3) {
NA
} else {}
y <- if(x < 3) {
NA
} else {}
y <- if(x < 3) {
NA
} else { }
y <- if(x < 3) {
NA
} else { 10 }
y
z <- 10
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z
z<-10
f(3)
pwd
pwd()
cls
clear()
cls()
demo()
pollutantmean <- function(directory, pollutant, id = 1:332) {
path = directory
fileList = list.files(path)
file.names = as.numeric(sub("\\.csv$","",fileList))
selected.files = fileList[match(id,file.names)]
Data = lapply(file.path(path,selected.files),read.csv)
Data = do.call(rbind.data.frame,Data)
mean(Data[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
makeCacheMatrix <- function(x = matrix()) {
InverseOfX <- NULL
set <- function(y) {
x <<- y
InverseOfX <<- NULL
}
get <- function() x
setInv <- function(inv) InverseOfX <<- inv
getInv <- function() InverseOfX
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setInv(m)
m
}
pwd()
ls
ls()
best<-function(state,outcome){
dir<-getwd();directory2<-paste(c(dir,"/outcome-of-care-measures.csv"),collapse='')
a<-read.csv(directory2,na.strings="Not Available");b<-a[,c(2,7,11,17,23)]
colnames(b)<-c("hospitalname","state1","heartattack","heartfailure","pneumonia")
b$hospitalname<-as.character(b$hospitalname);x1<-subset(b,b$state1==state)
if (nrow(x1)==0)
{
stop("invalid state")
}
if (outcome!="heart attack" && outcome!="heart failure" && outcome!="pneumonia")
{
stop("invalid outcome")
}
if (outcome=="heart attack")
{
bad<-is.na(x1$heartattack)
x2<-x1[!bad,]
x3<-subset(x2,heartattack==min(x2$heartattack))
}
if (outcome=="heart failure")
{
bad<-is.na(x1$heartfailure)
x2<-x1[!bad,]
x3<-subset(x2,heartfailure==min(x2$heartfailure))
}
if (outcome=="pneumonia")
{
bad<-is.na(x1$pneumonia)
x2<-x1[!bad,]
x3<-subset(x2,pneumonia==min(x2$pneumonia))
}
x4<-x3$hospitalname;x5<-as.character(sort(x4))
return (x5[1])
}
best("TX","heart attack")
library(knitr)
knit2html("StormAnalysis.Rmd")
q()
